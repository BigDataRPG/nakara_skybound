from typing import Any, Dict, List

import streamlit as st

from .character import CharacterClass, Player
from .game_engine import GameEngine, GameState
from .time_system import TimeEra


class UIManager:
    def __init__(self):
        self.current_scene = None

    def render_game_state(self, state: GameState):
        """Render the current game state UI"""
        # Handle user input first to avoid loops
        self._handle_pending_actions(state)

        # Sidebar with player info
        self._render_sidebar(state)

        # Main game area
        col1, col2 = st.columns([2, 1])

        with col1:
            self._render_main_scene(state)

        with col2:
            self._render_info_panel(state)

    def _handle_pending_actions(self, state: GameState):
        """Handle pending actions without causing infinite loops"""
        # Handle character creation completion
        if (
            hasattr(st.session_state, "should_update_character")
            and st.session_state.should_update_character
        ):
            # Update player info
            state.player.name = st.session_state.player_name
            state.player.character_class = CharacterClass(st.session_state.player_class)

            # Reset stats based on new class
            state.player._set_class_stats()

            # Change scene to post-creation
            state.current_scene = "character_created"

            # Give starting time fragments
            state.time_fragments = 2

            # Clear the flag
            st.session_state.should_update_character = False
            st.session_state.character_created = True

    def _render_sidebar(self, state: GameState):
        """Render player information sidebar"""
        with st.sidebar:
            st.header(f"üßô‚Äç‚ôÇÔ∏è {state.player.name}")
            st.subheader(f"‡∏ô‡∏±‡∏Å{state.player.character_class.value}")

            # Era and location indicator with more detailed info
            era_info = {
                TimeEra.PAST: ("üèõÔ∏è", "‡∏≠‡∏î‡∏µ‡∏ï‡∏Å‡∏≤‡∏•", "‡∏¢‡∏∏‡∏Ñ‡∏ó‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏©‡∏é‡∏≤‡∏ô‡∏Ñ‡∏£"),
                TimeEra.PRESENT: ("üèôÔ∏è", "‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏•", "‡∏¢‡∏∏‡∏Ñ‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"),
                TimeEra.FUTURE: ("üåÜ", "‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Å‡∏≤‡∏•", "‡∏¢‡∏∏‡∏Ñ‡πÅ‡∏´‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"),
            }
            era_icon, era_name, era_desc = era_info.get(
                state.current_era, ("‚ùì", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö", "")
            )
            st.write(f"**‡∏¢‡∏∏‡∏Ñ:** {era_icon} {era_name}")
            if era_desc:
                st.caption(era_desc)

            # Location with Thai names
            location_names = {
                "central_plaza": "‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
                "temple": "‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß",
                "market": "‡∏ï‡∏•‡∏≤‡∏î‡πÇ‡∏ö‡∏£‡∏≤‡∏ì",
                "library": "‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏•",
                "palace": "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á",
            }
            current_location_thai = location_names.get(
                state.current_location, state.current_location
            )
            st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:** üìç {current_location_thai}")

            # Player stats with more visual feedback
            st.subheader("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
            stats = state.player.stats

            col1, col2 = st.columns(2)
            with col1:
                st.metric(
                    "‡∏õ‡∏±‡∏ç‡∏ç‡∏≤",
                    stats.wisdom,
                    delta=(
                        None
                        if not hasattr(st.session_state, "last_wisdom")
                        else stats.wisdom
                        - st.session_state.get("last_wisdom", stats.wisdom)
                    ),
                )
                st.metric(
                    "‡∏Å‡∏≥‡∏•‡∏±‡∏á",
                    stats.strength,
                    delta=(
                        None
                        if not hasattr(st.session_state, "last_strength")
                        else stats.strength
                        - st.session_state.get("last_strength", stats.strength)
                    ),
                )
                st.metric(
                    "‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå",
                    stats.mysticism,
                    delta=(
                        None
                        if not hasattr(st.session_state, "last_mysticism")
                        else stats.mysticism
                        - st.session_state.get("last_mysticism", stats.mysticism)
                    ),
                )

            with col2:
                st.metric(
                    "‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå",
                    stats.charisma,
                    delta=(
                        None
                        if not hasattr(st.session_state, "last_charisma")
                        else stats.charisma
                        - st.session_state.get("last_charisma", stats.charisma)
                    ),
                )
                st.metric(
                    "‡∏Å‡∏£‡∏£‡∏°",
                    stats.karma,
                    delta=(
                        None
                        if not hasattr(st.session_state, "last_karma")
                        else stats.karma
                        - st.session_state.get("last_karma", stats.karma)
                    ),
                )
                st.metric(
                    "‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤",
                    state.time_fragments,
                    delta=(
                        None
                        if not hasattr(st.session_state, "last_fragments")
                        else state.time_fragments
                        - st.session_state.get("last_fragments", state.time_fragments)
                    ),
                )

            # Store current stats for next comparison
            st.session_state.last_wisdom = stats.wisdom
            st.session_state.last_strength = stats.strength
            st.session_state.last_mysticism = stats.mysticism
            st.session_state.last_charisma = stats.charisma
            st.session_state.last_karma = stats.karma
            st.session_state.last_fragments = state.time_fragments

            # Day and loop counter with progress visualization
            day_progress = state.current_day / 7
            st.write(f"**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {state.current_day}/7")
            st.progress(day_progress, text=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£")
            st.write(f"**‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà:** {state.loop_count + 1}")

            # Show inventory if player has items
            if state.player.inventory:
                st.subheader("üéí ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á")
                for item in state.player.inventory[:3]:  # Show first 3 items
                    # Handle both Item objects and dictionaries
                    if hasattr(item, "name"):
                        item_name = item.name
                    elif isinstance(item, dict):
                        item_name = item.get("name", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠")
                    else:
                        item_name = str(item)
                    st.write(f"‚Ä¢ {item_name}")
                if len(state.player.inventory) > 3:
                    st.caption(f"‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(state.player.inventory) - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")

    def _render_main_scene(self, state: GameState):
        """Render the main game scene"""
        # Display location with era-specific styling
        location_names = {
            "central_plaza": "‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
            "temple": "‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß",
            "market": "‡∏ï‡∏•‡∏≤‡∏î‡πÇ‡∏ö‡∏£‡∏≤‡∏ì",
            "library": "‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏•",
            "palace": "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á",
        }
        current_location_thai = location_names.get(
            state.current_location, state.current_location
        )

        # Era-specific styling
        if state.current_era == TimeEra.PAST:
            st.markdown(f"### üèõÔ∏è {current_location_thai} - {state.current_era.value}")
        elif state.current_era == TimeEra.FUTURE:
            st.markdown(f"### üåÜ {current_location_thai} - {state.current_era.value}")
        else:
            st.markdown(f"### üèôÔ∏è {current_location_thai} - {state.current_era.value}")

        # Display any recent action results
        if (
            hasattr(st.session_state, "last_action_result")
            and st.session_state.last_action_result
        ):
            self._display_action_result(st.session_state.last_action_result)
            st.divider()

        # Scene description
        if state.current_scene == "game_start":
            self._render_intro_scene(state)
        elif state.current_scene == "character_created":
            self._render_post_creation_scene(state)
        elif state.current_scene == "action_result":
            self._render_action_result_scene(state)
        elif state.current_scene == "loop_reset":
            self._render_loop_reset_scene(state)
        else:
            self._render_standard_scene(state)

    def _display_action_result(self, result: Dict[str, Any]):
        """Display the result of an action as flowing narrative"""
        # Create a complete narrative story
        narrative_parts = []

        if "narrative" in result:
            narrative_parts.append(result["narrative"])

        # Blend consequences into the narrative
        if "consequences" in result and result["consequences"]:
            consequence_text = []
            for consequence in result["consequences"]:
                if consequence["type"] == "stat_change":
                    stat_name = {
                        "wisdom": "‡∏õ‡∏±‡∏ç‡∏ç‡∏≤",
                        "strength": "‡∏Å‡∏≥‡∏•‡∏±‡∏á",
                        "mysticism": "‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå",
                        "charisma": "‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå",
                        "karma": "‡∏Å‡∏£‡∏£‡∏°",
                    }.get(consequence["stat"], consequence["stat"])

                    value = consequence["value"]
                    if value > 0:
                        consequence_text.append(f"{stat_name}‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô")
                    else:
                        consequence_text.append(f"{stat_name}‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏•‡∏î‡∏•‡∏á")

                elif consequence["type"] == "time_fragment":
                    amount = consequence["amount"]
                    consequence_text.append(f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤ {amount} ‡∏ä‡∏¥‡πâ‡∏ô")

                elif consequence["type"] == "item_gain":
                    item = consequence["item"]
                    consequence_text.append(f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö '{item['name']}'")

                elif consequence["type"] == "day_advance":
                    days = consequence["amount"]
                    if days == 1:
                        consequence_text.append("‡∏ß‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß")
                    else:
                        consequence_text.append(f"‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ {days} ‡∏ß‡∏±‡∏ô")

                elif consequence["type"] == "quest_start":
                    quest_name = consequence["quest_name"]
                    consequence_text.append(f"‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô: '{quest_name}'")

                elif consequence["type"] == "relationship_change":
                    npc_name = consequence["npc_name"]
                    change = consequence["change"]
                    if change > 0:
                        consequence_text.append(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö{npc_name}‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô")
                    else:
                        consequence_text.append(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö{npc_name}‡πÅ‡∏¢‡πà‡∏•‡∏á")

            # Blend consequences into narrative
            if consequence_text:
                if len(consequence_text) == 1:
                    narrative_parts.append(f"\n\n{consequence_text[0]}")
                elif len(consequence_text) == 2:
                    narrative_parts.append(
                        f"\n\n{consequence_text[0]} ‡πÅ‡∏•‡∏∞{consequence_text[1]}"
                    )
                else:
                    consequence_sentence = (
                        ", ".join(consequence_text[:-1]) + f" ‡πÅ‡∏•‡∏∞{consequence_text[-1]}"
                    )
                    narrative_parts.append(f"\n\n{consequence_sentence}")

        # Display as a single flowing narrative
        complete_narrative = "".join(narrative_parts)

        # Use a nice container for the story
        with st.container():
            st.markdown("### üìñ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß")
            st.markdown(f"*{complete_narrative}*")

    def _render_standard_scene(self, state: GameState):
        """Render a standard game scene with enhanced actions"""
        # Get location description from world
        from .world import World

        world = World()
        world.initialize_locations()

        location_desc = world.get_location_description(
            state.current_location, state.current_era
        )
        st.write(location_desc)

        # Enhanced available actions with variety
        available_actions = world.get_available_actions(state.current_location)
        if available_actions:
            st.subheader("üéØ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ:")

            # Group actions by type for better organization
            exploration_actions = [
                a
                for a in available_actions
                if a in ["observe", "explore", "investigate"]
            ]
            social_actions = [
                a
                for a in available_actions
                if a in ["talk_to_people", "gossip", "negotiate"]
            ]
            spiritual_actions = [
                a for a in available_actions if a in ["meditate", "pray", "study_texts"]
            ]
            other_actions = [
                a
                for a in available_actions
                if a not in exploration_actions + social_actions + spiritual_actions
            ]

            if exploration_actions:
                st.write("**üîç ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à:**")
                cols = st.columns(len(exploration_actions))
                for i, action in enumerate(exploration_actions):
                    with cols[i]:
                        action_names = {
                            "observe": "‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡∏ì‡πå",
                            "explore": "‡∏™‡∏≥‡∏£‡∏ß‡∏à",
                            "investigate": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                        }
                        if st.button(
                            action_names.get(action, action),
                            key=f"explore_{action}_{i}",
                        ):
                            st.session_state.action_taken = action
                            st.session_state.action_category = "exploration"

            if social_actions:
                st.write("**üí¨ ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£:**")
                cols = st.columns(len(social_actions))
                for i, action in enumerate(social_actions):
                    with cols[i]:
                        action_names = {
                            "talk_to_people": "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô",
                            "gossip": "‡∏ü‡∏±‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡∏∑‡∏≠",
                            "negotiate": "‡πÄ‡∏à‡∏£‡∏à‡∏≤",
                        }
                        if st.button(
                            action_names.get(action, action), key=f"social_{action}_{i}"
                        ):
                            st.session_state.action_taken = action
                            st.session_state.action_category = "social"

            if spiritual_actions:
                st.write("**üßò ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°:**")
                cols = st.columns(len(spiritual_actions))
                for i, action in enumerate(spiritual_actions):
                    with cols[i]:
                        action_names = {
                            "meditate": "‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥",
                            "pray": "‡∏™‡∏ß‡∏î‡∏°‡∏ô‡∏ï‡∏£‡πå",
                            "study_texts": "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå",
                        }
                        if st.button(
                            action_names.get(action, action),
                            key=f"spiritual_{action}_{i}",
                        ):
                            st.session_state.action_taken = action
                            st.session_state.action_category = "spiritual"

        # Show NPCs with interaction options
        npcs = world.get_npcs_in_location(state.current_location)
        if npcs:
            st.subheader("üë• ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ô‡∏µ‡πâ:")
            for npc in npcs:
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.write(f"‚Ä¢ **{npc.name}** - {npc.role}")
                with col2:
                    if st.button(f"‡∏Ñ‡∏∏‡∏¢", key=f"talk_to_{npc.id}"):
                        st.session_state.action_taken = f"talk_to_{npc.id}"
                        st.session_state.action_category = "npc_interaction"

    def _render_info_panel(self, state: GameState):
        """Render information panel with all locations available"""
        st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        # Show current day progress with warning as it approaches 7
        progress = state.current_day / 7
        if state.current_day >= 6:
            st.warning(f"‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á {7 - state.current_day} ‡∏ß‡∏±‡∏ô!")
        st.progress(progress, text=f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {state.current_day}/7 ‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£")

        # Active quests
        if state.active_quests:
            st.write("**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:**")
            for quest in state.active_quests:
                st.write(f"‚Ä¢ {quest}")

        # Location movement - can travel to ANY location, not just connected ones
        st.subheader("üó∫Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á")
        all_locations = {
            "central_plaza": "‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
            "temple": "‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß",
            "market": "‡∏ï‡∏•‡∏≤‡∏î‡πÇ‡∏ö‡∏£‡∏≤‡∏ì",
            "library": "‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏•",
            "palace": "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á",
        }

        current_location_thai = all_locations.get(
            state.current_location, state.current_location
        )
        st.write(f"**‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {current_location_thai}")

        # Show all available locations except current one
        available_locations = {
            k: v for k, v in all_locations.items() if k != state.current_location
        }

        selected_location = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ:",
            options=list(available_locations.keys()),
            format_func=lambda x: available_locations[x],
            key="location_travel_select",
        )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("üö∂ ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢", key="instant_travel"):
                st.session_state.new_location = selected_location
        with col2:
            # Time cost for travel (advances day)
            if st.button("üèÉ ‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß", key="fast_travel"):
                st.session_state.new_location = selected_location
                st.session_state.advance_day = True

        # Time travel options
        st.subheader("‚è∞ ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤")

        # Check requirements and show them
        if state.time_fragments < 3:
            st.write("üèõÔ∏è ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏≠‡∏î‡∏µ‡∏ï")
            st.caption(f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ä‡∏¥‡πâ‡∏ô (‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ {state.time_fragments} ‡∏ä‡∏¥‡πâ‡∏ô)")
        else:
            if st.button("üèõÔ∏è ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏≠‡∏î‡∏µ‡∏ï", key="travel_past"):
                st.session_state.pending_time_travel = TimeEra.PAST

        if state.time_fragments < 5:
            st.write("üåÜ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï")
            st.caption(f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ä‡∏¥‡πâ‡∏ô (‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ {state.time_fragments} ‡∏ä‡∏¥‡πâ‡∏ô)")
        else:
            if st.button("üåÜ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï", key="travel_future"):
                st.session_state.pending_time_travel = TimeEra.FUTURE

        if state.current_era != TimeEra.PRESENT:
            if st.button("üèôÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", key="travel_present"):
                st.session_state.pending_time_travel = TimeEra.PRESENT

        # Loop control with story completion check
        st.subheader("üîÑ ‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡πÄ‡∏ß‡∏•‡∏≤")
        if state.current_day >= 7:
            st.error("üé≠ **‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!** 7 ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!")
            st.write("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏ô‡∏µ‡πâ?")
            if st.button("üìñ ‡∏î‡∏π‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ", key="view_summary"):
                st.session_state.show_summary = True
            if st.button("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà", key="trigger_loop"):
                st.session_state.trigger_loop = True
        else:
            st.info(f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {7 - state.current_day} ‡∏ß‡∏±‡∏ô ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏à‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
            # Show what will happen when cycle completes
            st.caption("‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 7 ‡∏ß‡∏±‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        # Show summary if requested
        if hasattr(st.session_state, "show_summary") and st.session_state.show_summary:
            self._show_cycle_summary(state)

    def _show_cycle_summary(self, state: GameState):
        """Show summary of the current cycle"""
        st.subheader("üìú ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏ô‡∏µ‡πâ")

        # Create narrative summary instead of data tables
        karma = state.player.stats.karma
        decisions_count = len(state.decisions_made)
        days_used = state.current_day if state.current_day <= 7 else 7

        # Build narrative summary
        summary_parts = []

        # Opening
        summary_parts.append(
            f"‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {days_used} ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏õ {decisions_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        )

        # Karma assessment with narrative
        if karma > 15:
            summary_parts.append(
                "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡πâ‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏î‡∏ß‡∏á‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏•‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå"
            )
        elif karma > 10:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        elif karma > 0:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
        elif karma == 0:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡πà‡∏ß‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ ‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤")
        elif karma > -10:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        else:
            summary_parts.append("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏ö‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡∏Å ‡πÄ‡∏á‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ")

        # Time fragments and wisdom
        if state.time_fragments > 5:
            summary_parts.append(
                f"‡∏Ñ‡∏∏‡∏ì‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ {state.time_fragments} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤"
            )

        if state.player.stats.wisdom > 20:
            summary_parts.append("‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏à‡∏ô‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå‡∏ú‡∏π‡πâ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà")
        elif state.player.stats.wisdom > 15:
            summary_parts.append("‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à")

        # Quests
        if state.active_quests:
            if len(state.active_quests) == 1:
                summary_parts.append(
                    f"‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à '{state.active_quests[0]}' ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"
                )
            else:
                summary_parts.append(
                    f"‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à {len(state.active_quests)} ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
                )

        # Future prediction
        if karma > 5:
            summary_parts.append(
                "\n\n‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏´‡∏ô‡πâ‡∏≤ ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏±‡πà‡∏á‡∏™‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏™‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î"
            )
        elif karma < -5:
            summary_parts.append(
                "\n\n‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏´‡∏ô‡πâ‡∏≤ ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ï‡∏¥‡∏î ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏ö"
            )
        else:
            summary_parts.append(
                "\n\n‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏´‡∏ô‡πâ‡∏≤ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡∏ä‡∏∞‡∏ï‡∏≤‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
            )

        # Display as flowing narrative
        complete_summary = " ".join(summary_parts)

        with st.container():
            st.markdown(f"*{complete_summary}*")

        # Simple stats for reference
        with st.expander("üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à", decisions_count)
                st.metric("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", days_used)
            with col2:
                st.metric("‡∏Å‡∏£‡∏£‡∏°", karma)
                st.metric("‡∏õ‡∏±‡∏ç‡∏ç‡∏≤", state.player.stats.wisdom)
            with col3:
                st.metric("‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤", state.time_fragments)
                st.metric("‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", len(state.active_quests))

    def _render_intro_scene(self, state: GameState):
        """Render the game introduction scene"""
        st.markdown(
            """
        ### üåÖ ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô
        
        ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏∑‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏±‡∏©‡∏é‡∏≤‡∏ô‡∏Ñ‡∏£ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏¢...
        
        *"‡πÄ‡∏ß‡∏•‡∏≤...‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‚Ä¶‡∏ó‡∏ß‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡πÑ‡∏ß‡πâ"*
        
        ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡πÜ ‡∏Å‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ô‡∏µ‡πâ...‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        """
        )

        # Character creation if first time
        if (
            not hasattr(st.session_state, "character_created")
            or not st.session_state.character_created
        ):
            self._render_character_creation()

    def _render_character_creation(self):
        """Render character creation interface"""
        st.subheader("üé≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£")

        # Initialize form data in session state if not exists
        if "form_name" not in st.session_state:
            st.session_state.form_name = "‡∏ú‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"
        if "form_class" not in st.session_state:
            st.session_state.form_class = "sage"

        name = st.text_input(
            "‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:", value=st.session_state.form_name, key="character_name_input"
        )

        character_class = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
            options=["sage", "warrior", "mystic"],
            index=["sage", "warrior", "mystic"].index(st.session_state.form_class),
            format_func=lambda x: {
                "sage": "üßô‚Äç‚ôÇÔ∏è ‡∏ô‡∏±‡∏Å‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå - ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå",
                "warrior": "‚öîÔ∏è ‡∏ô‡∏±‡∏Å‡∏£‡∏ö - ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå",
                "mystic": "üîÆ ‡∏ô‡∏±‡∏Å‡πÄ‡∏ß‡∏ó‡∏¢‡πå - ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏ç‡∏≤",
            }[x],
            key="character_class_select",
        )

        # Update session state
        st.session_state.form_name = name
        st.session_state.form_class = character_class

        if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", key="start_journey_btn"):
            # Store character creation data
            st.session_state.player_name = name
            st.session_state.player_class = character_class
            st.session_state.should_update_character = True
            # Don't call st.rerun() here - let the next render cycle handle it

    def _render_post_creation_scene(self, state: GameState):
        """Render scene after character creation"""
        st.markdown(
            f"""
        ### üåü ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {state.player.name}
        
        ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô... ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠{state.player.character_class.value}‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
        
        ‡∏£‡∏≠‡∏ö‡πÜ ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏°‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡πÅ‡∏õ‡∏•‡∏Å‡πÜ
        ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô...
        
        ### üéØ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ:
        """
        )

        # Show available actions
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üîç ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏£‡∏≠‡∏ö‡πÜ", key="explore_btn"):
                st.session_state.action_taken = "explore"

        with col2:
            if st.button("üí¨ ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÜ", key="talk_btn"):
                st.session_state.action_taken = "talk"

        with col3:
            if st.button("üßò ‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥", key="meditate_btn"):
                st.session_state.action_taken = "meditate"

    def _render_action_result_scene(self, state: GameState):
        """Render scene after an action has been taken"""
        # Get the last action result
        last_result = getattr(st.session_state, "last_action_result", {})

        if last_result and "next_options" in last_result:
            st.subheader("üéØ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")

            # Display next options as buttons
            cols = st.columns(min(len(last_result["next_options"]), 3))
            for i, option in enumerate(last_result["next_options"]):
                with cols[i % 3]:
                    if st.button(option["text"], key=f"next_option_{option['id']}_{i}"):
                        st.session_state.action_taken = option["id"]
        else:
            # Default continuing options
            st.subheader("üéØ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
            col1, col2, col3 = st.columns(3)

            with col1:
                if st.button("üîç ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡πà‡∏≠‡πÑ‡∏õ", key="continue_explore"):
                    st.session_state.action_taken = "explore"

            with col2:
                if st.button("üí¨ ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô", key="continue_talk"):
                    st.session_state.action_taken = "talk"

            with col3:
                if st.button("üßò ‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥", key="continue_meditate"):
                    st.session_state.action_taken = "meditate"

    def _render_loop_reset_scene(self, state: GameState):
        """Render the time loop reset scene with detailed summary"""
        st.markdown(
            f"""
        ### üîÑ ‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏Å‡∏≤‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {state.loop_count}
        
        ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á... ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡πÑ‡∏î‡πâ
        
        ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥
        
        *‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...*
        """
        )

        # Show detailed reset summary
        self._show_reset_summary(state)

        # Continue options
        st.subheader("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà:")
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üîç ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á", key="cautious_explore"):
                st.session_state.action_taken = "explore"

        with col2:
            if st.button("üí≠ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏à‡∏≤‡∏Å‡∏≠‡∏î‡∏µ‡∏ï", key="memory_action"):
                st.session_state.action_taken = "use_memory"

        with col3:
            if st.button("üßò ‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°", key="prepare_meditate"):
                st.session_state.action_taken = "meditate"

    def _show_reset_summary(self, state: GameState):
        """Show comprehensive summary as flowing narrative"""
        st.subheader("üìú ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")

        # Create narrative summary instead of data tables
        karma = state.player.stats.karma
        decisions_count = len(state.decisions_made)
        days_used = state.current_day if state.current_day <= 7 else 7

        # Build narrative summary
        summary_parts = []

        # Opening
        summary_parts.append(
            f"‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {days_used} ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏õ {decisions_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        )

        # Karma assessment with narrative
        if karma > 15:
            summary_parts.append(
                "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡πâ‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏î‡∏ß‡∏á‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏•‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå"
            )
        elif karma > 10:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        elif karma > 0:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
        elif karma == 0:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡πà‡∏ß‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ ‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤")
        elif karma > -10:
            summary_parts.append("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        else:
            summary_parts.append("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏ö‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡∏Å ‡πÄ‡∏á‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ")

        # Time fragments and wisdom
        if state.time_fragments > 5:
            summary_parts.append(
                f"‡∏Ñ‡∏∏‡∏ì‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ {state.time_fragments} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤"
            )

        if state.player.stats.wisdom > 20:
            summary_parts.append("‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏à‡∏ô‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå‡∏ú‡∏π‡πâ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà")
        elif state.player.stats.wisdom > 15:
            summary_parts.append("‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à")

        # Quests
        if state.active_quests:
            if len(state.active_quests) == 1:
                summary_parts.append(
                    f"‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à '{state.active_quests[0]}' ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"
                )
            else:
                summary_parts.append(
                    f"‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à {len(state.active_quests)} ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
                )

        # Future prediction
        if karma > 5:
            summary_parts.append(
                "\n\n‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏´‡∏ô‡πâ‡∏≤ ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏±‡πà‡∏á‡∏™‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏™‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î"
            )
        elif karma < -5:
            summary_parts.append(
                "\n\n‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏´‡∏ô‡πâ‡∏≤ ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ï‡∏¥‡∏î ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏ö"
            )
        else:
            summary_parts.append(
                "\n\n‡πÉ‡∏ô‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏´‡∏ô‡πâ‡∏≤ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡∏ä‡∏∞‡∏ï‡∏≤‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
            )

        # Display as flowing narrative
        complete_summary = " ".join(summary_parts)

        with st.container():
            st.markdown(f"*{complete_summary}*")

        # Simple stats for reference
        with st.expander("üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à", decisions_count)
                st.metric("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", days_used)
            with col2:
                st.metric("‡∏Å‡∏£‡∏£‡∏°", karma)
                st.metric("‡∏õ‡∏±‡∏ç‡∏ç‡∏≤", state.player.stats.wisdom)
            with col3:
                st.metric("‡πÄ‡∏®‡∏©‡πÄ‡∏ß‡∏•‡∏≤", state.time_fragments)
                st.metric("‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", len(state.active_quests))

    def handle_user_input(self, game_engine: GameEngine):
        """Handle user input and actions - moved to main.py to avoid calling from render"""
        pass  # This method is now empty - logic moved to main.py
